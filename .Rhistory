# Qual o retorno da seguinte função?
minhasNotas_1(Exe_1=NA, VA_1=8, Exe_2=c(10,1,5), Proj=10, VA_2=8, VA_3=10, Opt=2, threshold=8)
# Qual o retorno da seguinte função?
minhasNotas_1(Exe_1=c(10,9,7,1,NA,NA), VA_1=NA, Exe_2=7, Proj=7, VA_2=7, VA_3=10, Opt=1, threshold=7)
# Qual o retorno da seguinte função?
minhasNotas_1(Exe_1=c(10,9,7,1,NA,NA), VA_1=NA, Exe_2=7, Proj=7, VA_2=7, VA_3=10, Opt=1, threshold=7)
# Qual o retorno da seguinte função?
minhasNotas_1(Exe_1=NA, VA_1=8, Exe_2=NA, Proj=10, VA_2=8, VA_3=10, Opt=2, threshold=8)
# Qual o retorno da seguinte função?
minhasNotas_1(Exe_1=c(5,8), VA_1=8, Exe_2=c(10,1,5), Proj=10, VA_2=8, VA_3=2, Opt=3, threshold=8)
# Qual o retorno da seguinte função?
minhasNotas_1(Exe_1=NA, VA_1=8, Exe_2=c(10,1,5), Proj=10, VA_2=8, VA_3=10, Opt=3, threshold=8)
# Qual o retorno da seguinte função?
minhasNotas_1(Exe_1=c(5,8), VA_1=8, Exe_2=c(10,1,5), Proj=c(2,4), VA_2=8, VA_3=2, Opt=3, threshold=8)
# Qual o retorno da seguinte função?
minhasNotas_1(Exe_1=10, VA_1=NA, Exe_2=7, Proj=7, VA_2=7, VA_3=10, Opt=1, threshold=7)
# Qual o retorno da seguinte função?
minhasNotas_1(Exe_1=NA, VA_1=8, Exe_2=c(10,1,5), Proj=10, VA_2=8, VA_3=10, Opt=3, threshold=8)
# Qual o retorno da seguinte função?
minhasNotas_1(Exe_1=c(5,8), VA_1=8, Exe_2=c(10,1,5), Proj=c(2,4), VA_2=8, VA_3=2, Opt=3, threshold=8)
# Qual o retorno da seguinte função?
minhasNotas_1(Exe_1=10, VA_1=NA, Exe_2=7, Proj=7, VA_2=7, VA_3=10, Opt=1, threshold=7)
formatar_nota_mestrado <- function(nota) {
nota_letra <- "D"
if(nota >= 9 & nota <= 10) {
nota_letra <- "A"
}
else if(nota >= 7.5 & nota <= 8.9) {
nota_letra <- "B"
}
else if(nota >= 6 & nota <= 7.4) {
nota_letra <- "C"
}
return(nota_letra)
}
minhasNotas_2 <- function(
Exe_1, VA_1, Exe_2, Proj,
VA_2, VA_3, Opt, threshold){
if(is.na(Opt) | is.na(threshold)) {
return("Opção ou Threshold inválido!")
}
if(Opt < 1 | Opt > 3) {
return("Opção de nota Inválida!")
}
aux <- c("A","B","C","D")
if(length(aux[aux == threshold]) == 0) {
return("Threshold Inválido!")
}
#exe1, va1, exe2, proj, va2
pesos <- c(5,5,2,5,3)
notas <- c(NA,NA,NA)
enum_notas <- data.frame(A=4,B=3,C=2,D=1)
#Checando se existem notas invalidas: < 0 ou > 10
aux <- c(VA_1, VA_2, VA_3, Proj)
aux <- c(aux, Exe_1, Exe_2)
aux[is.na(aux)] <- 0
aux <- aux[aux < 0 | aux > 10]
if(ifelse(length(aux) > 0, T, F)) {
return("Notas Invalidas!")
}
Exe_1 <- c(Exe_1)
VA_1 <- c(VA_1)
Exe_2 <- c(Exe_2)
Proj <- c(Proj)
VA_2 <- c(VA_2)
VA_3 <- c(VA_3)
#Proj, 1va, 2va e 3va não podem ser lista
if(length(VA_1) > 1 | length(Proj) > 1 | length(VA_2) > 1 | length(VA_3) > 1) {
return("Quantidade de Notas Inválidas!")
}
######## 1 VA ########
#Checando se o aluno tem pelo menos uma nota na 1 va
if((length(Exe_1[is.na(Exe_1)]) == length(Exe_1)) & is.na(VA_1)) {
if(Opt == 1) {
return("Aluno não possui nota para a 1 va")
}
} else {
#se o if der falso, ele possui pelo meons uma nota na 1 va
Exe_1[is.na(Exe_1)] <- 0
VA_1[is.na(VA_1)] <- 0
notas[1] <- (mean(Exe_1)*pesos[1] + VA_1*pesos[2])/(pesos[1]+pesos[2])
if(Opt == 1) {
nota <- formatar_nota_mestrado(notas[1])
text <- paste("Média da 1VA:",nota)
if(enum_notas[nota] < enum_notas[threshold]) {
text <- paste(text, "- Abaixo da Média")
} else if (enum_notas[nota] == enum_notas[threshold]) {
text <- paste(text, "- Na Média")
} else {
text <- paste(text, "- Acima da Média")
}
return(text)
}
}
######## 2 VA ########
# nota[2] <- pesos[3]*Exe_2 + pesos[4]*VA_2 + pesos[5]*Proj
#Checando se o aluno tem pelo menos uma nota na 2 va
if((length(Exe_2[is.na(Exe_2)]) == length(Exe_2)) & is.na(VA_2) & is.na(Proj)) {
if(Opt == 2) {
return("Aluno não possui nota para a 2 va")
}
} else {
#se o if der falso, ele possui pelo meons uma nota na 2 va
Exe_2[is.na(Exe_2)] <- 0
Proj[is.na(Proj)] <- 0
VA_2[is.na(VA_2)] <- 0
notas[2] <- (mean(Exe_2)*pesos[3] + Proj*pesos[4] + VA_2*pesos[5])/(pesos[3]+pesos[4]+pesos[5])
if(Opt == 2) {
nota <- formatar_nota_mestrado(notas[2])
text <- paste("Média da 2VA:",nota)
if(enum_notas[nota] < enum_notas[threshold]) {
text <- paste(text, "- Abaixo da Média")
} else if (enum_notas[nota] == enum_notas[threshold]) {
text <- paste(text, "- Na Média")
} else {
text <- paste(text, "- Acima da Média")
}
return(text)
}
}
######## 3 VA ########
notas[3] <- VA_3
if(all(is.na(notas))) {
return("Aluno não possui nenhuma nota - Reprovado!!")
}
notas[is.na(notas)] <- 0
notas <- sort(notas, decreasing = T)
media_atual <- mean(c(notas[1],notas[2]))
nota <- formatar_nota_mestrado(media_atual)
if(enum_notas[nota] < enum_notas[threshold]) {
return(paste(nota, "-- Na Final!!"))
}
return(paste(nota, "-- Aprovado!!"))
}
# Qual o retorno da seguinte função?
minhasNotas_2(Exe_1=c(8,9,NA), VA_1=5, Exe_2=9, Proj=5, VA_2=4, VA_3=1, Opt=1, threshold="C")
# Qual o retorno da seguinte função?
minhasNotas_2(Exe_1=c(8,9,10,9,9,8,6), VA_1=4, Exe_2=c(8,3,11,9,9,5), Proj=4, VA_2=4, VA_3=1, Opt=1, threshold="C")
# Qual o retorno da seguinte função?
minhasNotas_2(Exe_1=c(8,9,10,9,9,8,6), VA_1=7, Exe_2=c(8,3,10,9,9,5), Proj=8, VA_2=3, VA_3=1, Opt=3, threshold="B")
# Qual o retorno da seguinte função?
minhasNotas_2(Exe_1=c(8,9,10,9,9,8,6), VA_1=7, Exe_2=c(8,3,10,9,9,5), Proj=8, VA_2=8, VA_3=1, Opt=2, threshold="B")
# Qual o retorno da seguinte função?
minhasNotas_2(Exe_1=c(8,9,10,9,9,8,6), VA_1=7, Exe_2=c(8,3,10,9,9,5), Proj=5, VA_2=5, VA_3=10, Opt=4, threshold="B")
paste(c,'m')
?paste
as.character(v)
# Dado o vetor com valores de medidas de comprimento em metros
# v<-c(20,30,4,934,1077,22), submeta a função paste() que apenas
# adiciona a unidade metro (‘m’) após cada número do vetor.
# Note que não pode haver espaço entre o número e a unidade de medida.
# Além disso, use aspas simples e remova todos os espaços em banco do comando.
v<-c(20,30,4,934,1077,22)
paste(v,'m')
paste(v,sep='m')
paste(v,'m')
paste(v,'m',sep='')
poema <- "No meio do caminho tinha uma pedra
tinha uma pedra no meio do caminho
tinha uma pedra
no meio do caminho tinha uma pedra.
Nunca me esquecerei desse acontecimento
na vida de minhas retinas tão fatigadas.
Nunca me esquecerei que no meio do caminho
tinha uma pedra
tinha uma pedra no meio do caminho
no meio do caminho tinha uma pedra."
?nchar
nchar(poem)
nchar(poema)
nchar(
"me chamo
fabio"
)
# Dado o vetor de strings
# txt = c("eeer","3ca1n","fg","can","man","sigmean","fa3nta","fan"),
# submeta a expressão regular que deve ser escrita no atributo ‘pattern’ da
# função grep(pattern= " ", txt, value= TRUE) de modo que ela retorne as
# palavras: "can", "man" e "fan".
txt = c("eeer","3ca1n","fg","can","man","sigmean","fa3nta","fan")
?grep
letters
# Dado o vetor de strings
# txt = c("eeer","3ca1n","fg","can","man","sigmean","fa3nta","fan"),
# submeta a expressão regular que deve ser escrita no atributo ‘pattern’ da
# função grep(pattern= " ", txt, value= TRUE) de modo que ela retorne as
# palavras: "can", "man" e "fan".
txt = c("eeer","3ca1n","fg","can","man","sigmean","fa3nta","fan")
grep("[cmf]an",txt)
txt[grep("[cmf]an",txt)]
txt[grep("(c|m|f)an",txt)]
txt[grep("(c|m|f)an",txt)]
# Dado a string txt = "eeer3GHJca1nfgSigmanfaUIOntafan", qual a
# expressão regular que deve ser adicionada no atributo ‘pattern’ da função
# str_extract_all(string=txt,pattern=" "), para que ela extraia apenas números e
# letras maiúsculas. Note que você precisa carregar o pacote stringr.
# Também use o Regex. *
library(stringr)
str_extract_all(string=txt,pattern="([1-9]|[A-Z])")
txt[str_extract_all(string=txt,pattern="([1-9]|[A-Z])")]
str_extract_all(string=txt,pattern="([1-9]|[A-Z])")
grep("([1-9]|[A-Z])",txt)
str_extract_all(string=txt,pattern="[a-z]")
str_extract_all(string=txt,pattern="[A-Z]")
str_extract_all(string=txt,pattern="[1-9]")
str_extract_all(string=txt,pattern="[1-9]")
txt <- "eeer3GHJca1nfgSigmanfaUIOntafan"
str_extract_all(string=txt,pattern="[1-9]")
str_extract_all(string=txt,pattern="[1-9A-Z]")
str_extract_all(string=txt,pattern="[1-9]|[A-Z]")
str_extract_all(string=txt,pattern="([1-9]|[A-Z])")
txt
str_extract_all(string=txt,pattern="([1-9]|[A-Z])")
txt <- "eeer3GHJca1nfgSigmanfaUIOntafan"
str_extract_all(string=txt,pattern="([1-9]|[A-Z])")
# Responda a questão anterior com o POSIX. *
str_extract_all(string=txt,pattern="([:digit:]|[:upper:])")
str_extract_all(string=txt,pattern="UFRPE(20|capd)PPGIA")
str_extract_all(string=txt,pattern="UFRPE(20|capd)PPGIA")
str_extract_all(string=txt,pattern="UFRPE[20|capd]PPGIA")
# Dado a string txt = "tttyUFRPE20PPGIAkjgkjghk2j34j321UFRPEcapdPPGIA",
# qual a expressão regular que deve ser adicionado no atributo ‘pattern’ da
# função str_extract_all(string=txt,pattern=" "), para que ela extraia os
# padrões "UFRPE19PPGIA" e "UFRPEcapdPPGIA".
txt <- "tttyUFRPE20PPGIAkjgkjghk2j34j321UFRPEcapdPPGIA"
str_extract_all(string=txt,pattern="UFRPE[20|capd]PPGIA")
str_extract_all(string=txt,pattern="UFRPE(20|capd)PPGIA")
Também será necessário ter acesso a API do twitter, para que os tweets referentes a hashtag sejam obtidos. Primeiro, será necessário ter uma conta no twitter, que pode ser criada no endereço [twitter.com](twitter.com). Em seguida, acessaremos o endereço [developer.twitter.com](developer.twitter.com), para solicitar as chaves de acesso da API.
cls
head(airquality)
## Getting started with equations
#### $P(x) = a_{n}x^n + a_{n-1}x^{n-1} + ... + a_1x^1 + a_0$
#### $P(x) = a_{n}(x-r_1)(x-r_2)(x-r_3)...(x-r_n)$
#### onde $r_1$, $r_2$, ..., $r_n$ são todas as raízes de $P(x)$
## Referencia
sales <- read.table("https://training-course-material.com/images/8/8f/Sales.txt",header=TRUE)
knitr::opts_chunk$set(echo = TRUE)
lines(MRT_3F, type = "o",pch=7, col = "cyan")
y<- seq(0,600, by = 100)
MRT_1F <-c(517.1468515630205, 85.13094142168089, 30.333207896694553, 12.694776264558937, 3.3041601673945418, 1.1823111717498882, 1.1892293502386786)
MRT_3F <-c(156.68929936163462, 11.540837783562276, 0.4512835621696538, 0.4509797929766453, 0.4502068233039181, 0.4496185276300172, 0.4543157082191288)
MRT_5F <-c(83.90319666471157, 0.3068151086494968, 0.30522314133037304, 0.3072588968084928, 0.30655265997285697, 0.3055812715727718, 0.3053297166713006)
MRT_10F <-c(29.55430642951759, 0.19832832665772515, 0.1971923924717474, 0.19796648905716516, 0.19615594370806338, 0.2034569237883263, 0.19617420889447737)
MRT_15F <-c(11.317736530583566, 0.167364215666193, 0.16172168266811013, 0.16701085329580515, 0.1598052657153692, 0.1645934043532696, 0.16216563797118075)
MRT_sem_F <-c(11.93430909937736, 0.6095414637034009, 0.6060645101029295, 0.612167181646899, 0.6146761002685637, 0.6096747087200697, 0.6125810476877268)
clock <- c(0.1, 0.5, 1, 1.5, 2, 2.5, 3)
plot(clock, y, type='o', xlab= "Time between Things requests (seconds)", ylab= "Response Time (sec.)", main = "Gráfico")
lines(MRT_1F, pch=4, col = "black")
lines(MRT_3F, pch=11, col = "yellow")
lines(MRT_5F, pch=1, col = "red")
lines(MRT_10F, pch=2, col = "blue")
lines(MRT_15F, pch=5,col = "purple")
lines(MRT_sem_F, pch=4, col = "green")
legend("topright", pch = c(4,11,1,2,5,4),
col = c("black","yellow","red","blue","purple","green"),
legend = c("1 Fog", "3 Fogs","5 Fogs","10 Fogs","15 Fogs","w/o Fog"))
plot(
clock,
y,
main = "Gráfico",
xlab= "Time between Things requests (seconds)",
ylab= "Response Time (sec.)"
)
?plot
?plot()
plot(
clock,
y,
main = "Gráfico",
type="n",
xlab= "Time between Things requests (seconds)",
ylab= "Response Time (sec.)"
)
?lines
lines(MRT_1F,    type='o', pch=4,  col = "black")
lines(MRT_3F,    type='o', pch=11, col = "yellow")
lines(MRT_5F,    type='o', pch=1,  col = "red")
lines(MRT_10F,   type='o', pch=2,  col = "blue")
lines(MRT_15F,   type='o', pch=5,  col = "purple")
lines(MRT_sem_F, pch=4, col = "green")
?lines
plot(
clock,
y,
main = "Gráfico",
type="n",
xlab= "Time between Things requests (seconds)",
ylab= "Response Time (sec.)"
)
lines(MRT_1F,    log="x" ,type='o', pch=4,  col = "black")
lines(MRT_3F,    type='o', pch=11, col = "yellow")
lines(MRT_5F,    type='o', pch=1,  col = "red")
lines(MRT_10F,   type='o', pch=2,  col = "blue")
lines(MRT_15F,   type='o', pch=5,  col = "purple")
lines(MRT_sem_F, pch=4, col = "green")
legend("topright", pch = c(4,11,1,2,5,4),
col = c("black","yellow","red","blue","purple","green"),
legend = c("1 Fog", "3 Fogs","5 Fogs","10 Fogs","15 Fogs","w/o Fog"))
lot(
clock,
y,
main = "Gráfico",
type="n",
xlab= "Time between Things requests (seconds)",
ylab= "Response Time (sec.)"
)
lines(MRT_1F,    log="x" ,type='o', pch=4,  col = "black")
lines(MRT_3F,    log="x" ,type='o', pch=11, col = "yellow")
lines(MRT_5F,    log="x" ,type='o', pch=1,  col = "red")
lines(MRT_10F,   log="x" ,type='o', pch=2,  col = "blue")
lines(MRT_15F,   log="x" ,type='o', pch=5,  col = "purple")
lines(MRT_sem_F, pch=4, col = "green")
legend("topright", pch = c(4,11,1,2,5,4),
col = c("black","yellow","red","blue","purple","green"),
legend = c("1
plot(
clock,
y,
main = "Gráfico",
type="n",
xlab= "Time between Things requests (seconds)",
ylab= "Response Time (sec.)",
log="x"
)
lines(MRT_1F,    type='o', pch=4,  col = "black")
lines(MRT_3F,    type='o', pch=11, col = "yellow")
lines(MRT_5F,    type='o', pch=1,  col = "red")
lines(MRT_10F,   type='o', pch=2,  col = "blue")
lines(MRT_15F,   type='o', pch=5,  col = "purple")
lines(MRT_sem_F, pch=4, col = "green")
legend("topright", pch = c(4,11,1,2,5,4),
col = c("black","yellow","red","blue","purple","green"),
legend = c("1 Fog", "3 Fogs","5 Fogs","10 Fogs","15 Fogs","w/o Fog"))
?plot()
plot(
clock,
y,
main = "Gráfico",
type="n",
xlab= "Time between Things requests (seconds)",
ylab= "Response Time (sec.)",
log="x"
)
lines(MRT_1F,    type='o', pch=4,  col = "black")
lines(MRT_3F,    type='o', pch=11, col = "yellow")
lines(MRT_5F,    type='o', pch=1,  col = "red")
lines(MRT_10F,   type='o', pch=2,  col = "blue")
lines(MRT_15F,   type='o', pch=5,  col = "purple")
lines(MRT_sem_F, pch=4, col = "green")
plot(
clock,
y,
main = "Gráfico",
type="n",
xlab= "Time between Things requests (seconds)",
ylab= "Response Time (sec.)",
log="xy"
)
lines(MRT_1F,    type='o', pch=4,  col = "black")
lines(MRT_3F,    type='o', pch=11, col = "yellow")
lines(MRT_5F,    type='o', pch=1,  col = "red")
lines(MRT_10F,   type='o', pch=2,  col = "blue")
lines(MRT_15F,   type='o', pch=5,  col = "purple")
lines(MRT_sem_F, pch=4, col = "green")
legend("topright", pch = c(4,11,1,2,5,4),
col = c("black","yellow","red","blue","purple","green"),
legend = c("1 Fog", "3 Fogs","5 Fogs","10 Fogs","15 Fogs","w/o Fog"))
plot(
clock,
y,
main = "Gráfico",
type="n",
xlab= "Time between Things requests (seconds)",
ylab= "Response Time (sec.)",
log="x"
)
lines(MRT_1F,    type='o', pch=4,  col = "black")
lines(MRT_3F,    type='o', pch=11, col = "yellow")
lines(MRT_5F,    type='o', pch=1,  col = "red")
lines(MRT_10F,   type='o', pch=2,  col = "blue")
lines(MRT_15F,   type='o', pch=5,  col = "purple")
lines(MRT_sem_F, pch=4, col = "green")
legend("topright", pch = c(4,11,1,2,5,4),
col = c("black","yellow","red","blue","purple","green"),
legend = c("1 Fog", "3 Fogs","5 Fogs","10 Fogs","15 Fogs","w/o Fog"))
plot(
clock,
main = "Gráfico",
type="n",
xlab= "Time between Things requests (seconds)",
ylab= "Response Time (sec.)",
log="y"
)
lines(MRT_1F,    type='o', pch=4,  col = "black")
lines(MRT_3F,    type='o', pch=11, col = "yellow")
lines(MRT_5F,    type='o', pch=1,  col = "red")
lines(MRT_10F,   type='o', pch=2,  col = "blue")
lines(MRT_15F,   type='o', pch=5,  col = "purple")
lines(MRT_sem_F, pch=4, col = "green")
plot(
clock, MRT_1F,    type='o', pch=4,  col = "black" ,
main = "Gráfico",
xlab= "Time between Things requests (seconds)",
ylab= "Response Time (sec.)",
log="y"
)
#lines(MRT_1F,    type='o', pch=4,  col = "black")
lines(MRT_3F,    type='o', pch=11, col = "yellow")
lines(MRT_5F,    type='o', pch=1,  col = "red")
lines(MRT_10F,   type='o', pch=2,  col = "blue")
lines(MRT_15F,   type='o', pch=5,  col = "purple")
lines(MRT_sem_F, pch=4, col = "green")
plot(
clock, MRT_1F,    type='o', pch=4,  col = "black" ,
main = "Gráfico",
xlab= "Time between Things requests (seconds)",
ylab= "Response Time (sec.)"
)
#lines(MRT_1F,    type='o', pch=4,  col = "black")
lines(MRT_3F,    type='o', pch=11, col = "yellow")
lines(MRT_5F,    type='o', pch=1,  col = "red")
lines(MRT_10F,   type='o', pch=2,  col = "blue")
lines(MRT_15F,   type='o', pch=5,  col = "purple")
lines(MRT_sem_F, pch=4, col = "green")
legend("topright", pch = c(4,11,1,2,5,4),
col = c("black","yellow","red","blue","purple","green"),
legend = c("1 Fog", "3 Fogs","5 Fogs","10 Fogs","15 Fogs","w/o Fog"))
## Formatação e Outros Requisitos
install.packages("rmdformats")
##### DOWNLOAD E IMPORTAÇÃO DE BIBLIOTECAS ####
#Download packages if not installed
list.of.packages <- c("kableExtra","viridis", "ggplot2", "rmdformats", "rmarkdown", "dplyr", "tidyr", "readr", "knitr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
#Import packages from list
lapply(list.of.packages, require, character.only = TRUE)
#Dataset Urls e filenames
dataset <- data.frame(
"url"=c(
"http://dados.recife.pe.gov.br/dataset/45dbabee-0352-411a-b289-66fccde8942a/resource/5eaed1e8-aa7f-48d7-9512-638f80874870/download/sedec_chamados.csv",
"http://dados.recife.pe.gov.br/dataset/45dbabee-0352-411a-b289-66fccde8942a/resource/bb4b8cdb-122b-491a-80f7-b028b66108e1/download/sedec_vistorias.csv",
"http://dados.recife.pe.gov.br/dataset/45dbabee-0352-411a-b289-66fccde8942a/resource/48dd7535-329c-4a6a-bb2d-f26ebb1ab531/download/sedec_lonas.csv",
"http://dados.recife.pe.gov.br/dataset/45dbabee-0352-411a-b289-66fccde8942a/resource/fa35d810-b291-4e74-9282-3c4db1aca312/download/sedec_solicitacoes.csv",
"http://dados.recife.pe.gov.br/dataset/45dbabee-0352-411a-b289-66fccde8942a/resource/7a22d871-250e-419a-9b5a-1cab19db7be5/download/sedec_tipo_ocorrencias.csv"
),
"filename"=c(
"sedec_chamados.csv",
"sedec_vistorias.csv",
"sedec_lonas.csv",
"sedec_solicitacoes.csv",
"sedec_tipo_ocorrencias.csv"
)
)
#Setting path to current directory "./"
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#create folders if not exists
dir.create("./dataset")
#Download the dataset files if not exists
for (i in 1:nrow(dataset)) {
url <- dataset$url[i]
filepath <- paste("./dataset/", dataset$filename[i], sep='')
if(!file.exists(filepath)) {
download.file(url, filepath)
}
}
data_chamados <- read_csv2("./dataset/sedec_chamados.csv")
data_vistorias <- read_csv2("./dataset/sedec_vistorias.csv")
data_lonas <- read_csv2("./dataset/sedec_lonas.csv")
data_solicitacoes <- read_csv2("./dataset/sedec_solicitacoes.csv")
data_tipo_ocorrencias <- read_csv2("./dataset/sedec_tipo_ocorrencias.csv")
data_solicitacoes$processo_solicitacao <- as.factor(data_solicitacoes$processo_solicitacao)
levels(data_solicitacoes$processo_solicitacao)
data_chamados <- data_chamados %>% select(
"processo_numero",
"solicitacao_data",
"solicitacao_bairro",
"solicitacao_vitimas",
"solicitacao_vitimas_fatais",
"processo_situacao",
"processo_tipo",
"processo_status",
"processo_data_conclusao"
)
data_chamados$solicitacao_bairro <- as.factor(data_chamados$solicitacao_bairro)
levels(data_chamados$solicitacao_bairro)
data_chamados$processo_situacao <- as.factor(data_chamados$processo_situacao)
levels(data_chamados$processo_situacao)
data_chamados$processo_tipo <- as.factor(data_chamados$processo_tipo)
levels(data_chamados$processo_tipo)
data_chamados$processo_status <- as.factor(data_chamados$processo_status)
levels(data_chamados$processo_status)[2] <- "CONCLUÍDO"
levels(data_chamados$processo_status)[4] <- "TRAMITAÇÃO"
levels(data_chamados$processo_status)[6] <- "TRAMITAÇÃO"
levels(data_chamados$processo_status)
data_chamados[c(1, 100,300,5000,9000,30000),c(
"solicitacao_data",
"solicitacao_bairro",
"solicitacao_vitimas",
"solicitacao_vitimas_fatais",
"processo_status",
"processo_data_conclusao"
)]
aux_chamados <- read_csv2("./dataset/sedec_chamados.csv", col_types = cols())
rows_chamados <- colnames(aux_chamados)
rows_solicitacoes <- colnames(data_solicitacoes)
data_solicitacoes <- data_solicitacoes %>% select("processo_numero", setdiff(rows_solicitacoes, rows_chamados))
data_chamados <- merge(
x=data_chamados,
y=data_solicitacoes,
by="processo_numero",
all=F
)
